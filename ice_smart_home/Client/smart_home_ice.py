# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `smart_home.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'Brightness' not in _M_SmartHome.__dict__:
    _M_SmartHome.Brightness = Ice.createTempClass()
    class Brightness(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    Brightness.low = Brightness("low", 0)
    Brightness.normal = Brightness("normal", 1)
    Brightness.high = Brightness("high", 2)
    Brightness._enumerators = { 0:Brightness.low, 1:Brightness.normal, 2:Brightness.high }

    _M_SmartHome._t_Brightness = IcePy.defineEnum('::SmartHome::Brightness', Brightness, (), Brightness._enumerators)

    _M_SmartHome.Brightness = Brightness
    del Brightness

if 'Color' not in _M_SmartHome.__dict__:
    _M_SmartHome.Color = Ice.createTempClass()
    class Color(object):
        def __init__(self, red=0, green=0, blue=0):
            self.red = red
            self.green = green
            self.blue = blue

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.red)
            _h = 5 * _h + Ice.getHash(self.green)
            _h = 5 * _h + Ice.getHash(self.blue)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.Color):
                return NotImplemented
            else:
                if self.red is None or other.red is None:
                    if self.red != other.red:
                        return (-1 if self.red is None else 1)
                else:
                    if self.red < other.red:
                        return -1
                    elif self.red > other.red:
                        return 1
                if self.green is None or other.green is None:
                    if self.green != other.green:
                        return (-1 if self.green is None else 1)
                else:
                    if self.green < other.green:
                        return -1
                    elif self.green > other.green:
                        return 1
                if self.blue is None or other.blue is None:
                    if self.blue != other.blue:
                        return (-1 if self.blue is None else 1)
                else:
                    if self.blue < other.blue:
                        return -1
                    elif self.blue > other.blue:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Color)

        __repr__ = __str__

    _M_SmartHome._t_Color = IcePy.defineStruct('::SmartHome::Color', Color, (), (
        ('red', (), IcePy._t_int),
        ('green', (), IcePy._t_int),
        ('blue', (), IcePy._t_int)
    ))

    _M_SmartHome.Color = Color
    del Color

if 'LampState' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampState = Ice.createTempClass()
    class LampState(Ice.Value):
        def __init__(self, isOn=False, brightness=Ice.Unset, color=Ice.Unset, autoBrightness=Ice.Unset, isDancing=Ice.Unset):
            self.isOn = isOn
            self.brightness = brightness
            self.color = color
            self.autoBrightness = autoBrightness
            self.isDancing = isDancing

        def ice_id(self):
            return '::SmartHome::LampState'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LampState'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LampState)

        __repr__ = __str__

    _M_SmartHome._t_LampState = IcePy.defineValue('::SmartHome::LampState', LampState, -1, (), False, False, None, (
        ('isOn', (), IcePy._t_bool, False, 0),
        ('brightness', (), _M_SmartHome._t_Brightness, True, 1),
        ('color', (), _M_SmartHome._t_Color, True, 2),
        ('autoBrightness', (), IcePy._t_bool, True, 3),
        ('isDancing', (), IcePy._t_bool, True, 4)
    ))
    LampState._ice_type = _M_SmartHome._t_LampState

    _M_SmartHome.LampState = LampState
    del LampState

_M_SmartHome._t_Lamp = IcePy.defineValue('::SmartHome::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampPrx = Ice.createTempClass()
    class LampPrx(Ice.ObjectPrx):

        def switchLight(self, context=None):
            return _M_SmartHome.Lamp._op_switchLight.invoke(self, ((), context))

        def switchLightAsync(self, context=None):
            return _M_SmartHome.Lamp._op_switchLight.invokeAsync(self, ((), context))

        def begin_switchLight(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_switchLight.begin(self, ((), _response, _ex, _sent, context))

        def end_switchLight(self, _r):
            return _M_SmartHome.Lamp._op_switchLight.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Lamp._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Lamp._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lamp._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Lamp._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LampPrx.ice_checkedCast(proxy, '::SmartHome::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'
    _M_SmartHome._t_LampPrx = IcePy.defineProxy('::SmartHome::Lamp', LampPrx)

    _M_SmartHome.LampPrx = LampPrx
    del LampPrx

    _M_SmartHome.Lamp = Ice.createTempClass()
    class Lamp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Lamp')

        def ice_id(self, current=None):
            return '::SmartHome::Lamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lamp'

        def switchLight(self, current=None):
            raise NotImplementedError("servant method 'switchLight' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LampDisp)

        __repr__ = __str__

    _M_SmartHome._t_LampDisp = IcePy.defineClass('::SmartHome::Lamp', Lamp, (), None, ())
    Lamp._ice_type = _M_SmartHome._t_LampDisp

    Lamp._op_switchLight = IcePy.Operation('switchLight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Lamp._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_LampState, False, 0), ())

    _M_SmartHome.Lamp = Lamp
    del Lamp

if 'LampIsInAutoModeBrightnessChangeImpossible' not in _M_SmartHome.__dict__:
    _M_SmartHome.LampIsInAutoModeBrightnessChangeImpossible = Ice.createTempClass()
    class LampIsInAutoModeBrightnessChangeImpossible(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::LampIsInAutoModeBrightnessChangeImpossible'

    _M_SmartHome._t_LampIsInAutoModeBrightnessChangeImpossible = IcePy.defineException('::SmartHome::LampIsInAutoModeBrightnessChangeImpossible', LampIsInAutoModeBrightnessChangeImpossible, (), False, None, ())
    LampIsInAutoModeBrightnessChangeImpossible._ice_type = _M_SmartHome._t_LampIsInAutoModeBrightnessChangeImpossible

    _M_SmartHome.LampIsInAutoModeBrightnessChangeImpossible = LampIsInAutoModeBrightnessChangeImpossible
    del LampIsInAutoModeBrightnessChangeImpossible

_M_SmartHome._t_SuperLamp = IcePy.defineValue('::SmartHome::SuperLamp', Ice.Value, -1, (), False, True, None, ())

if 'SuperLampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SuperLampPrx = Ice.createTempClass()
    class SuperLampPrx(_M_SmartHome.LampPrx):

        def changeBrightness(self, brightness, context=None):
            return _M_SmartHome.SuperLamp._op_changeBrightness.invoke(self, ((brightness, ), context))

        def changeBrightnessAsync(self, brightness, context=None):
            return _M_SmartHome.SuperLamp._op_changeBrightness.invokeAsync(self, ((brightness, ), context))

        def begin_changeBrightness(self, brightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SuperLamp._op_changeBrightness.begin(self, ((brightness, ), _response, _ex, _sent, context))

        def end_changeBrightness(self, _r):
            return _M_SmartHome.SuperLamp._op_changeBrightness.end(self, _r)

        def changeColor(self, color, context=None):
            return _M_SmartHome.SuperLamp._op_changeColor.invoke(self, ((color, ), context))

        def changeColorAsync(self, color, context=None):
            return _M_SmartHome.SuperLamp._op_changeColor.invokeAsync(self, ((color, ), context))

        def begin_changeColor(self, color, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SuperLamp._op_changeColor.begin(self, ((color, ), _response, _ex, _sent, context))

        def end_changeColor(self, _r):
            return _M_SmartHome.SuperLamp._op_changeColor.end(self, _r)

        def switchAutoBrightness(self, context=None):
            return _M_SmartHome.SuperLamp._op_switchAutoBrightness.invoke(self, ((), context))

        def switchAutoBrightnessAsync(self, context=None):
            return _M_SmartHome.SuperLamp._op_switchAutoBrightness.invokeAsync(self, ((), context))

        def begin_switchAutoBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SuperLamp._op_switchAutoBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_switchAutoBrightness(self, _r):
            return _M_SmartHome.SuperLamp._op_switchAutoBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SuperLampPrx.ice_checkedCast(proxy, '::SmartHome::SuperLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SuperLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SuperLamp'
    _M_SmartHome._t_SuperLampPrx = IcePy.defineProxy('::SmartHome::SuperLamp', SuperLampPrx)

    _M_SmartHome.SuperLampPrx = SuperLampPrx
    del SuperLampPrx

    _M_SmartHome.SuperLamp = Ice.createTempClass()
    class SuperLamp(_M_SmartHome.Lamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Lamp', '::SmartHome::SuperLamp')

        def ice_id(self, current=None):
            return '::SmartHome::SuperLamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SuperLamp'

        def changeBrightness(self, brightness, current=None):
            raise NotImplementedError("servant method 'changeBrightness' not implemented")

        def changeColor(self, color, current=None):
            raise NotImplementedError("servant method 'changeColor' not implemented")

        def switchAutoBrightness(self, current=None):
            raise NotImplementedError("servant method 'switchAutoBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SuperLampDisp)

        __repr__ = __str__

    _M_SmartHome._t_SuperLampDisp = IcePy.defineClass('::SmartHome::SuperLamp', SuperLamp, (), None, (_M_SmartHome._t_LampDisp,))
    SuperLamp._ice_type = _M_SmartHome._t_SuperLampDisp

    SuperLamp._op_changeBrightness = IcePy.Operation('changeBrightness', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_Brightness, False, 0),), (), None, (_M_SmartHome._t_LampIsInAutoModeBrightnessChangeImpossible,))
    SuperLamp._op_changeColor = IcePy.Operation('changeColor', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHome._t_Color, False, 0),), (), None, ())
    SuperLamp._op_switchAutoBrightness = IcePy.Operation('switchAutoBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHome.SuperLamp = SuperLamp
    del SuperLamp

_M_SmartHome._t_DancingSuperLamp = IcePy.defineValue('::SmartHome::DancingSuperLamp', Ice.Value, -1, (), False, True, None, ())

if 'DancingSuperLampPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DancingSuperLampPrx = Ice.createTempClass()
    class DancingSuperLampPrx(_M_SmartHome.SuperLampPrx):

        def switchDancingMode(self, context=None):
            return _M_SmartHome.DancingSuperLamp._op_switchDancingMode.invoke(self, ((), context))

        def switchDancingModeAsync(self, context=None):
            return _M_SmartHome.DancingSuperLamp._op_switchDancingMode.invokeAsync(self, ((), context))

        def begin_switchDancingMode(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.DancingSuperLamp._op_switchDancingMode.begin(self, ((), _response, _ex, _sent, context))

        def end_switchDancingMode(self, _r):
            return _M_SmartHome.DancingSuperLamp._op_switchDancingMode.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DancingSuperLampPrx.ice_checkedCast(proxy, '::SmartHome::DancingSuperLamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DancingSuperLampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DancingSuperLamp'
    _M_SmartHome._t_DancingSuperLampPrx = IcePy.defineProxy('::SmartHome::DancingSuperLamp', DancingSuperLampPrx)

    _M_SmartHome.DancingSuperLampPrx = DancingSuperLampPrx
    del DancingSuperLampPrx

    _M_SmartHome.DancingSuperLamp = Ice.createTempClass()
    class DancingSuperLamp(_M_SmartHome.SuperLamp):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::DancingSuperLamp', '::SmartHome::Lamp', '::SmartHome::SuperLamp')

        def ice_id(self, current=None):
            return '::SmartHome::DancingSuperLamp'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::DancingSuperLamp'

        def switchDancingMode(self, current=None):
            raise NotImplementedError("servant method 'switchDancingMode' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DancingSuperLampDisp)

        __repr__ = __str__

    _M_SmartHome._t_DancingSuperLampDisp = IcePy.defineClass('::SmartHome::DancingSuperLamp', DancingSuperLamp, (), None, (_M_SmartHome._t_SuperLampDisp,))
    DancingSuperLamp._ice_type = _M_SmartHome._t_DancingSuperLampDisp

    DancingSuperLamp._op_switchDancingMode = IcePy.Operation('switchDancingMode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHome.DancingSuperLamp = DancingSuperLamp
    del DancingSuperLamp

if 'ThereIsSomethingInTheWayOfTheDoor' not in _M_SmartHome.__dict__:
    _M_SmartHome.ThereIsSomethingInTheWayOfTheDoor = Ice.createTempClass()
    class ThereIsSomethingInTheWayOfTheDoor(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::ThereIsSomethingInTheWayOfTheDoor'

    _M_SmartHome._t_ThereIsSomethingInTheWayOfTheDoor = IcePy.defineException('::SmartHome::ThereIsSomethingInTheWayOfTheDoor', ThereIsSomethingInTheWayOfTheDoor, (), False, None, ())
    ThereIsSomethingInTheWayOfTheDoor._ice_type = _M_SmartHome._t_ThereIsSomethingInTheWayOfTheDoor

    _M_SmartHome.ThereIsSomethingInTheWayOfTheDoor = ThereIsSomethingInTheWayOfTheDoor
    del ThereIsSomethingInTheWayOfTheDoor

_M_SmartHome._t_GarageDoor = IcePy.defineValue('::SmartHome::GarageDoor', Ice.Value, -1, (), False, True, None, ())

if 'GarageDoorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.GarageDoorPrx = Ice.createTempClass()
    class GarageDoorPrx(Ice.ObjectPrx):

        def changeDoorPosition(self, context=None):
            return _M_SmartHome.GarageDoor._op_changeDoorPosition.invoke(self, ((), context))

        def changeDoorPositionAsync(self, context=None):
            return _M_SmartHome.GarageDoor._op_changeDoorPosition.invokeAsync(self, ((), context))

        def begin_changeDoorPosition(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.GarageDoor._op_changeDoorPosition.begin(self, ((), _response, _ex, _sent, context))

        def end_changeDoorPosition(self, _r):
            return _M_SmartHome.GarageDoor._op_changeDoorPosition.end(self, _r)

        def isDoorOpen(self, context=None):
            return _M_SmartHome.GarageDoor._op_isDoorOpen.invoke(self, ((), context))

        def isDoorOpenAsync(self, context=None):
            return _M_SmartHome.GarageDoor._op_isDoorOpen.invokeAsync(self, ((), context))

        def begin_isDoorOpen(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.GarageDoor._op_isDoorOpen.begin(self, ((), _response, _ex, _sent, context))

        def end_isDoorOpen(self, _r):
            return _M_SmartHome.GarageDoor._op_isDoorOpen.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.GarageDoorPrx.ice_checkedCast(proxy, '::SmartHome::GarageDoor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.GarageDoorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::GarageDoor'
    _M_SmartHome._t_GarageDoorPrx = IcePy.defineProxy('::SmartHome::GarageDoor', GarageDoorPrx)

    _M_SmartHome.GarageDoorPrx = GarageDoorPrx
    del GarageDoorPrx

    _M_SmartHome.GarageDoor = Ice.createTempClass()
    class GarageDoor(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::GarageDoor')

        def ice_id(self, current=None):
            return '::SmartHome::GarageDoor'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::GarageDoor'

        def changeDoorPosition(self, current=None):
            raise NotImplementedError("servant method 'changeDoorPosition' not implemented")

        def isDoorOpen(self, current=None):
            raise NotImplementedError("servant method 'isDoorOpen' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_GarageDoorDisp)

        __repr__ = __str__

    _M_SmartHome._t_GarageDoorDisp = IcePy.defineClass('::SmartHome::GarageDoor', GarageDoor, (), None, ())
    GarageDoor._ice_type = _M_SmartHome._t_GarageDoorDisp

    GarageDoor._op_changeDoorPosition = IcePy.Operation('changeDoorPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_ThereIsSomethingInTheWayOfTheDoor,))
    GarageDoor._op_isDoorOpen = IcePy.Operation('isDoorOpen', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_SmartHome.GarageDoor = GarageDoor
    del GarageDoor

if 'TermohigrometrState' not in _M_SmartHome.__dict__:
    _M_SmartHome.TermohigrometrState = Ice.createTempClass()
    class TermohigrometrState(object):
        def __init__(self, temperature=0.0, humidity=0.0):
            self.temperature = temperature
            self.humidity = humidity

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.TermohigrometrState):
                return NotImplemented
            else:
                if self.temperature != other.temperature:
                    return False
                if self.humidity != other.humidity:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TermohigrometrState)

        __repr__ = __str__

    _M_SmartHome._t_TermohigrometrState = IcePy.defineStruct('::SmartHome::TermohigrometrState', TermohigrometrState, (), (
        ('temperature', (), IcePy._t_double),
        ('humidity', (), IcePy._t_double)
    ))

    _M_SmartHome.TermohigrometrState = TermohigrometrState
    del TermohigrometrState

_M_SmartHome._t_Termohigrometr = IcePy.defineValue('::SmartHome::Termohigrometr', Ice.Value, -1, (), False, True, None, ())

if 'TermohigrometrPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TermohigrometrPrx = Ice.createTempClass()
    class TermohigrometrPrx(Ice.ObjectPrx):

        def getState(self, context=None):
            return _M_SmartHome.Termohigrometr._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Termohigrometr._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Termohigrometr._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Termohigrometr._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TermohigrometrPrx.ice_checkedCast(proxy, '::SmartHome::Termohigrometr', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TermohigrometrPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Termohigrometr'
    _M_SmartHome._t_TermohigrometrPrx = IcePy.defineProxy('::SmartHome::Termohigrometr', TermohigrometrPrx)

    _M_SmartHome.TermohigrometrPrx = TermohigrometrPrx
    del TermohigrometrPrx

    _M_SmartHome.Termohigrometr = Ice.createTempClass()
    class Termohigrometr(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Termohigrometr')

        def ice_id(self, current=None):
            return '::SmartHome::Termohigrometr'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Termohigrometr'

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TermohigrometrDisp)

        __repr__ = __str__

    _M_SmartHome._t_TermohigrometrDisp = IcePy.defineClass('::SmartHome::Termohigrometr', Termohigrometr, (), None, ())
    Termohigrometr._ice_type = _M_SmartHome._t_TermohigrometrDisp

    Termohigrometr._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_TermohigrometrState, False, 0), ())

    _M_SmartHome.Termohigrometr = Termohigrometr
    del Termohigrometr

if '_t_termohigrometrHistory' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_termohigrometrHistory = IcePy.defineSequence('::SmartHome::termohigrometrHistory', (), _M_SmartHome._t_TermohigrometrState)

_M_SmartHome._t_TermohigrometrWithHistory = IcePy.defineValue('::SmartHome::TermohigrometrWithHistory', Ice.Value, -1, (), False, True, None, ())

if 'TermohigrometrWithHistoryPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.TermohigrometrWithHistoryPrx = Ice.createTempClass()
    class TermohigrometrWithHistoryPrx(_M_SmartHome.TermohigrometrPrx):

        def getTermohigrometrHistory(self, context=None):
            return _M_SmartHome.TermohigrometrWithHistory._op_getTermohigrometrHistory.invoke(self, ((), context))

        def getTermohigrometrHistoryAsync(self, context=None):
            return _M_SmartHome.TermohigrometrWithHistory._op_getTermohigrometrHistory.invokeAsync(self, ((), context))

        def begin_getTermohigrometrHistory(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.TermohigrometrWithHistory._op_getTermohigrometrHistory.begin(self, ((), _response, _ex, _sent, context))

        def end_getTermohigrometrHistory(self, _r):
            return _M_SmartHome.TermohigrometrWithHistory._op_getTermohigrometrHistory.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.TermohigrometrWithHistoryPrx.ice_checkedCast(proxy, '::SmartHome::TermohigrometrWithHistory', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.TermohigrometrWithHistoryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TermohigrometrWithHistory'
    _M_SmartHome._t_TermohigrometrWithHistoryPrx = IcePy.defineProxy('::SmartHome::TermohigrometrWithHistory', TermohigrometrWithHistoryPrx)

    _M_SmartHome.TermohigrometrWithHistoryPrx = TermohigrometrWithHistoryPrx
    del TermohigrometrWithHistoryPrx

    _M_SmartHome.TermohigrometrWithHistory = Ice.createTempClass()
    class TermohigrometrWithHistory(_M_SmartHome.Termohigrometr):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Termohigrometr', '::SmartHome::TermohigrometrWithHistory')

        def ice_id(self, current=None):
            return '::SmartHome::TermohigrometrWithHistory'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::TermohigrometrWithHistory'

        def getTermohigrometrHistory(self, current=None):
            raise NotImplementedError("servant method 'getTermohigrometrHistory' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_TermohigrometrWithHistoryDisp)

        __repr__ = __str__

    _M_SmartHome._t_TermohigrometrWithHistoryDisp = IcePy.defineClass('::SmartHome::TermohigrometrWithHistory', TermohigrometrWithHistory, (), None, (_M_SmartHome._t_TermohigrometrDisp,))
    TermohigrometrWithHistory._ice_type = _M_SmartHome._t_TermohigrometrWithHistoryDisp

    TermohigrometrWithHistory._op_getTermohigrometrHistory = IcePy.Operation('getTermohigrometrHistory', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHome._t_termohigrometrHistory, False, 0), ())

    _M_SmartHome.TermohigrometrWithHistory = TermohigrometrWithHistory
    del TermohigrometrWithHistory

# End of module SmartHome
